function [gyropos, Xbase, unitvec1, unitvec2, jjbase, kkbase]= buildTrack(Xearth, Rbase, nseg, ncir)
    % THIS FUNCTION WILL INSTALL A TRACK ON A PARTICULAR POINT OF THE EARTH
    % THE POSITION OF THE POINT, THE POSITIONS OF POINTS ON THE TRACK, AND
    % THE TWO AXIS THAT GENERATE THE TANGENT TRACK WILL BE RETURNED

    % WLOG let's pick a point on the earth to place our gyrocompass
    % say a point on the circle just above the equator
    % this is node ((ncir-1)/2 - 1) * nseg + 1
    gyropos = Xearth(((ncir-1)/2 - 1) * nseg + 1,:);
    % plot the radius at this point, this is the normal vector
    % plot3([gyropos(1) , 0], [gyropos(2) , 0], [gyropos(3) , 0],  'linewidth', 3)
    % use the radius as a normal vector to generate a tangential plane
    % arbitrarily choose two unit vectors to span the plane

    % try
    x0 = 50; y0 = 50;
    z0 = gyropos(3) + (gyropos(1)*(gyropos(1)-x0)+gyropos(2)*(gyropos(2)-y0))/gyropos(3);
    unitvec1 = [x0-gyropos(1), y0-gyropos(2), z0-gyropos(3)]./norm([x0-gyropos(1), y0-gyropos(2), z0-gyropos(3)]);


    % the other unit vector should be generated by cross product
    unitvec2 = cross(unitvec1, gyropos)./norm(cross(unitvec1, gyropos));

    % suppose we want 60 points on the tangent base
    thetas = 0: 2*pi/60: 2*pi-0.01;
    %Rbase = 20;

    Xbase = zeros(60, 3);
    for i = 1:60
        Xbase(i,:) = gyropos + Rbase .* cos(thetas(i))*unitvec1 + Rbase .* sin(thetas(i))*unitvec2;
    end
    % there are also 60 links
    jjbase = 1:60;
    kkbase = [2:60, 1];

end